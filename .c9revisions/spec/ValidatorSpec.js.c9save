{"ts":1360003553688,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function formatDate(d) {\n    if (d.constructor == Number) {\n        d = new Date(d);\n    }\n\n    return (d.getYear() + 1900) + '-' + (d.getMonth() + 1) + '-' + d.getDate();\n}\n\ndescribe('Validator', function() {\n\n    var testForm, testFormHtml,\n        checkboxInput, textInput, confirmationInput, passwordInput, radioInput,\n        defaultOptions = {\n            events: 'submit',\n            selector: 'input',\n            preventDefault: true\n        };\n\n    beforeEach(function() {\n        testForm = $('#testForm');\n        testFormHtml = testForm.html();\n\n        checkboxInput = $('[name=checkboxInput]', testForm);\n        textInput = $('[name=textInput]', testForm);\n        confirmationInput = $('[name=textInput_confirmation]', testForm);\n        passwordInput = $('[name=passwordInput]', testForm);\n        radioInput = $('[name=radioInput]', testForm);\n    });\n\n    afterEach(function() {\n        testForm.validator('destroy');\n        testForm.html(testFormHtml);\n    });\n\n    it ('should validate with no rules', function() {\n\n        var valid = null;\n\n        testForm.validator($.extend({\n            done: function(v) {\n                valid = v;\n            }\n        }, defaultOptions)).submit();\n\n        waitsFor(function() {\n            return valid !== null;\n        });\n\n        runs(function() {\n            expect(valid).toEqual(true);\n        });\n\n    });\n\n    it ('should allow custom attributes for validations', function() {\n\n        var elem = null,\n            elemValid = null,\n            formValid = null;\n\n        textInput.data('custom', 'required');\n        textInput.val('any');\n\n        testForm.validator($.extend({\n            validationAttribute: 'custom',\n            callback: function(e, v) {\n                elem = e;\n                elemValid = v;\n            },\n            done: function(v) {\n                formValid = v;\n            }\n        }, defaultOptions)).submit();\n\n        waitsFor(function() {\n            return formValid !== null;\n        });\n\n        runs(function() {\n            expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n            expect(elemValid).toEqual(true);\n            expect(formValid).toEqual(true);\n        });\n\n    });\n\n    it ('should allow multiple instances', function() {\n\n        var warningsValid = null,\n            errorsValid = null;\n\n        textInput.data('warnings', 'email').data('errors', 'required').val('not an email');\n\n        testForm.validator($.extend({\n            validationAttribute: 'warnings',\n            done: function(v) {\n                warningsValid = v;\n            }\n        }, defaultOptions))\n        .validator($.extend({\n            validationAttribute: 'errors',\n            done: function(v) {\n                errorsValid = v;\n            }\n        }, defaultOptions)).submit();\n\n        waitsFor(function() {\n            return warningsValid !== null &&\n                errorsValid !== null;\n        });\n\n        runs(function() {\n            expect(warningsValid).toEqual(false);\n            expect(errorsValid).toEqual(true);\n        });\n\n    });\n\n    describe('for the accepted rule', function() {\n\n        it ('should pass a checked checkbox', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            checkboxInput.data('validations', 'accepted');\n            checkboxInput.prop('checked', true);\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(checkboxInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n        \n        });\n\n        it ('should fail an unchecked checkbox input', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            checkboxInput.data('validations', 'accepted');\n            checkboxInput.prop('checked', false);\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(checkboxInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n        \n        });\n\n        it ('should pass \"1\" in a text input', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'accepted');\n            textInput.val('1');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass \"yes\" in a text input', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'accepted');\n            textInput.val('yes');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail an empty text input', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'accepted');\n            textInput.val('');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should fail non-1/non-yes in a text input', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'accepted');\n            textInput.val('magic');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the active_url rule', function() {\n\n        it ('should pass a valid URL', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'active_url');\n            textInput.val('ftp://sub.domain.com/url/params?get=params&are=magic');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail an invalid URL', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'active_url');\n            textInput.val('ftp:/a/sub.domain.com/url/params?get=params&are=magic');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('does not actually test that a URL is active', function() {});\n\n    });\n\n    describe('for the after rule', function() {\n\n        it ('should pass for tomorrow\\'s date', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null,\n                now = new Date;\n\n            textInput.data('validations', 'after:' + formatDate(now));\n            textInput.val(formatDate(now.setDate(now.getDate() + 1)));\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for today\\'s date', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null,\n                now = new Date;\n\n            textInput.data('validations', 'after:' + formatDate(now));\n            textInput.val(formatDate(now));\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should fail for yesterday\\'s date', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null,\n                now = new Date;\n\n            textInput.data('validations', 'after:' + formatDate(now));\n            textInput.val(formatDate(now.setDate(now.getDate() - 1)));\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the alpha rule', function() {\n\n        it ('should pass for alphabetical characters only', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'alpha')\n                .val('AbCdEfGhIjKlMnOpQrStUvWxYz');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elemValid !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for non-alphabetical characters', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'alpha')\n                .val('AbCdEfGhIjKlMn2OpQrStUvWxYz');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elemValid !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the alpha_dash rule', function() {\n\n        it ('should pass for alphanumeric characters, dashes, and underscores only', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'alpha_dash')\n                .val('AbCdEfGhIjKlMnOpQrStUvWxYz0123456789-_');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elemValid !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for other characters', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'alpha_dash')\n                .val('AbCdEfGhIjKlMn OpQrStUvWxYz0123456789-_');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elemValid !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the alpha_num rule', function() {\n\n        it ('should pass for alphanumeric characters only', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'alpha_num')\n                .val('AbCdEfGhIjKlMnOpQrStUvWxYz0123456789');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elemValid !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for other characters', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'alpha_num')\n                .val('AbCdEfGhIjKlMn-OpQrStUvWxYz0123456789');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elemValid !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the before rule', function() {\n\n        it ('should fail for tomorrow\\'s date', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null,\n                now = new Date;\n\n            textInput.data('validations', 'before:' + formatDate(now));\n            textInput.val(formatDate(now.setDate(now.getDate() + 1)));\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should fail for today\\'s date', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null,\n                now = new Date;\n\n            textInput.data('validations', 'before:' + formatDate(now));\n            textInput.val(formatDate(now));\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should pass for yesterday\\'s date', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null,\n                now = new Date;\n\n            textInput.data('validations', 'before:' + formatDate(now));\n            textInput.val(formatDate(now.setDate(now.getDate() - 1)));\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n    });\n\n    describe('for the between rule', function() {\n\n        it ('should pass for a value between the terms', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'between:9,10')\n                .val('9.5');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass for values equal to the terms', function() {\n\n            var elemsValid = [],\n                formValid = null;\n\n            textInput.data('validations', 'between:9,10')\n                .val('9.000000');\n            passwordInput.data('validations', 'between:9,10')\n                .val('10.000000');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elemsValid.push(v);\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return formValid !== null;\n            });\n\n            runs(function() {\n                expect(elemsValid).not.toContain(false);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for values outside of the terms', function() {\n\n            var elemsValid = [],\n                formValid = null;\n\n            textInput.data('validations', 'between:9,10')\n                .val('8.999999');\n            passwordInput.data('validations', 'between:9,10')\n                .val('10.000001');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elemsValid.push(v);\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return formValid !== null;\n            });\n\n            runs(function() {\n                expect(elemsValid).not.toContain(true);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the confirmed rule', function() {\n\n        it ('should pass for identical values', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'confirmed')\n                .val('Confirm me!');\n            confirmationInput.val('Confirm me!');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for different values', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'confirmed')\n                .val('Confirm me!');\n            confirmationInput.val('Different!');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the different rule', function() {\n\n        it ('should fail for identical values', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'different:textInput_confirmation')\n                .val('Confirm me!');\n            confirmationInput.val('Confirm me!');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should pass for different values', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'different:textInput_confirmation')\n                .val('Confirm me!');\n            confirmationInput.val('Different!');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n    });\n\n    describe('for the email rule', function() {\n\n        it ('should pass for a valid email address', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'email')\n                .val('test@example.com');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for an invalid email address', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'email')\n                .val('test@example');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the exists rule', function() {\n\n        it ('should pass for any value', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'exists')\n                .val('some value');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n    });\n\n    describe('for the image rule', function() {\n\n        it ('should pass for a value ending in an image extension', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'image')\n                .val('test.png');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a value ending in a non-image extension', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'image')\n                .val('test.txt');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the in rule', function() {\n\n        it ('should pass for a value given in the terms', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'in:foo,bar,baz,foobar')\n                .val('baz');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a value not given in the terms', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'in:foo,bar,baz,foobar')\n                .val('foob');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the integer rule', function() {\n\n        it ('should pass for a valid integer', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'integer')\n                .val('42');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a float', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'integer')\n                .val('42.7');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should fail for a non-number', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'integer')\n                .val('NaN');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n    });\n\n    describe('for the ip rule', function() {\n\n        it ('should pass for a valid IP address', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'ip')\n                .val('127.0.0.1');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for an invalid IP address', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'ip')\n                .val('256.12.34.56');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the max rule', function() {\n\n        it ('should pass for a value less than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'max:10')\n                .val('9');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass for a value equal to the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'max:10')\n                .val('10');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a value greater than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'max:10')\n                .val('11');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n        });\n\n    });\n\n    describe('for the min rule', function() {\n\n        it ('should fail for a value less than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'min:10')\n                .val('9');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should pass for a value equal to the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'min:10')\n                .val('10');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass for a value greater than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'min:10')\n                .val('11');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n        });\n\n    });\n\n    describe('for the mimes rule', function() {\n\n        it ('should pass for a value given in the terms', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'mimes:txt,rtf')\n                .val('test.rtf');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a value not given in the terms', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'mimes:txt,rtf')\n                .val('test.png');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the numeric rule', function() {\n\n        it ('should pass for a valid integer', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('42');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass for a valid float', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('42.7');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a non-number', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('NaN');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n    });\n\n    describe('for the regex rule', function() {\n\n        it ('should pass for a match', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'regex:\\\\w{4}')\n                .val('asdf');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a non-match', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'regex:\\\\w{4}')\n                .val('jkl');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n    });\n\n    describe('for the required rule', function() {\n\n        it ('should pass for a value', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'required')\n                .val('asdf');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for an empty value', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'required')\n                .val('  ');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should pass on any checked radio', function() {\n\n            var formValid = null;\n\n            radioInput.data('validations', 'required');\n            radioInput.first().prop('checked', 'checked');\n\n            testForm.validator($.extend({\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return formValid !== null;\n            });\n\n            runs(function() {\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for an unchecked radio (group)', function() {\n\n            var formValid = null;\n\n            radioInput.data('validations', 'required');\n\n            testForm.validator($.extend({\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return formValid !== null;\n            });\n\n            runs(function() {\n                expect(formValid).toEqual(false);\n            });\n\n        });\n    });\n\n    describe('for the required_with rule', function() {\n\n        it ('should pass with values in both', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'required_with:passwordInput')\n                .val('asdf');\n            passwordInput.val('jkl');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass with values in neither', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'required_with:passwordInput')\n                .val('  ');\n            passwordInput.val('');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail with value in term but not in self', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'required_with:passwordInput')\n                .val('  ');\n            passwordInput.val('jkl');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n    });\n\n    describe('for the same rule', function() {\n\n        it ('should pass for identical values', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'same:textInput_confirmation')\n                .val('Confirm me!');\n            confirmationInput.val('Confirm me!');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for different values', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'same:textInput_confirmation')\n                .val('Confirm me!');\n            confirmationInput.val('Different!');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the size rule', function() {\n\n        it ('should pass for a string of length equal to the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'size:4')\n                .val('asdf');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a string shorter than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'size:4')\n                .val('jkl');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should fail for a string longer than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'size:4')\n                .val('asdfj');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should pass for a number equal to the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'size:10')\n                .val('10');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail for a number less than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'size:10')\n                .val('9');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n        it ('should fail for a number greater than the term', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'size:9')\n                .val('10');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n    describe('for the unique rule', function() {\n\n        it ('should pass for any value', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'unique')\n                .val('some value');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n    });\n\n    describe('for the url rule', function() {\n\n        it ('should pass a valid URL', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'active_url');\n            textInput.val('ftp://sub.domain.com/url/params?get=params&are=magic');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should fail an invalid URL', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'active_url');\n            textInput.val('ftp:/a/sub.domain.com/url/params?get=params&are=magic');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(false);\n                expect(formValid).toEqual(false);\n            });\n\n        });\n\n    });\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":69844}]],"length":69844}
{"contributors":[],"silentsave":false,"ts":1360166573742,"patch":[[{"diffs":[[0,"});\n\n        });"],[1,"\n        \n        it ('should pass for a negative integer', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'integer')\n                .val('-42');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n            \n        });"],[0,"\n\n        it ('s"]],"start1":37301,"start2":37301,"length1":32,"length2":965}]],"length":70777,"saved":false}
{"ts":1360166647223,"patch":[[{"diffs":[[0,"r a "],[-1,"valid float', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('"],[1,"negative integer', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('-42');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass for a valid float', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('42.7');\n\n            testForm.validator($.extend({\n                callback: function(e, v) {\n                    elem = e;\n                    elemValid = v;\n                },\n                done: function(v) {\n                    formValid = v;\n                }\n            }, defaultOptions)).submit();\n\n            waitsFor(function() {\n                return elem !== null &&\n                    formValid !== null;\n            });\n\n            runs(function() {\n                expect($(elem).attr('name')).toEqual(textInput.attr('name'));\n                expect(elemValid).toEqual(true);\n                expect(formValid).toEqual(true);\n            });\n\n        });\n\n        it ('should pass for a negative float', function() {\n\n            var elem = null,\n                elemValid = null,\n                formValid = null;\n\n            textInput.data('validations', 'numeric')\n                .val('-"],[0,"42.7"]],"start1":50510,"start2":50510,"length1":209,"length2":2035}]],"length":72603,"saved":false}
